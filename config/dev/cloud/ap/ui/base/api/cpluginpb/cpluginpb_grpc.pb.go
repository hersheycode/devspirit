// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cpluginpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CPluginServiceClient is the client API for CPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CPluginServiceClient interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
}

type cPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCPluginServiceClient(cc grpc.ClientConnInterface) CPluginServiceClient {
	return &cPluginServiceClient{cc}
}

func (c *cPluginServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/base.CPluginService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CPluginServiceServer is the server API for CPluginService service.
// All implementations should embed UnimplementedCPluginServiceServer
// for forward compatibility
type CPluginServiceServer interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
}

// UnimplementedCPluginServiceServer should be embedded to have forward compatible implementations.
type UnimplementedCPluginServiceServer struct {
}

func (UnimplementedCPluginServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

// UnsafeCPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CPluginServiceServer will
// result in compilation errors.
type UnsafeCPluginServiceServer interface {
	mustEmbedUnimplementedCPluginServiceServer()
}

func RegisterCPluginServiceServer(s grpc.ServiceRegistrar, srv CPluginServiceServer) {
	s.RegisterService(&CPluginService_ServiceDesc, srv)
}

func _CPluginService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CPluginServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/base.CPluginService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CPluginServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CPluginService_ServiceDesc is the grpc.ServiceDesc for CPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.CPluginService",
	HandlerType: (*CPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CPluginService_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cpluginpb.proto",
}
