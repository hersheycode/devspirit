// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package intentsyspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// IntentSysClient is the client API for IntentSys service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IntentSysClient interface {
	SetIntent(ctx context.Context, in *SetIntentRequest, opts ...grpc.CallOption) (*SetIntentResponse, error)
}

type intentSysClient struct {
	cc grpc.ClientConnInterface
}

func NewIntentSysClient(cc grpc.ClientConnInterface) IntentSysClient {
	return &intentSysClient{cc}
}

func (c *intentSysClient) SetIntent(ctx context.Context, in *SetIntentRequest, opts ...grpc.CallOption) (*SetIntentResponse, error) {
	out := new(SetIntentResponse)
	err := c.cc.Invoke(ctx, "/intentsyspb.IntentSys/SetIntent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntentSysServer is the server API for IntentSys service.
// All implementations should embed UnimplementedIntentSysServer
// for forward compatibility
type IntentSysServer interface {
	SetIntent(context.Context, *SetIntentRequest) (*SetIntentResponse, error)
}

// UnimplementedIntentSysServer should be embedded to have forward compatible implementations.
type UnimplementedIntentSysServer struct {
}

func (UnimplementedIntentSysServer) SetIntent(context.Context, *SetIntentRequest) (*SetIntentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetIntent not implemented")
}

// UnsafeIntentSysServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IntentSysServer will
// result in compilation errors.
type UnsafeIntentSysServer interface {
	mustEmbedUnimplementedIntentSysServer()
}

func RegisterIntentSysServer(s grpc.ServiceRegistrar, srv IntentSysServer) {
	s.RegisterService(&IntentSys_ServiceDesc, srv)
}

func _IntentSys_SetIntent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetIntentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntentSysServer).SetIntent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intentsyspb.IntentSys/SetIntent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntentSysServer).SetIntent(ctx, req.(*SetIntentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// IntentSys_ServiceDesc is the grpc.ServiceDesc for IntentSys service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IntentSys_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "intentsyspb.IntentSys",
	HandlerType: (*IntentSysServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetIntent",
			Handler:    _IntentSys_SetIntent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intentsys.proto",
}
