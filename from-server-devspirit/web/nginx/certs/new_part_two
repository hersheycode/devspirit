#!/bin/bash

#./new_part_two
# MAKE SURE THIDS IS RUN ON server host: 
#sudo chown -R -h nate:nate $ROOT

echo "Running part_two inside dev container..."

EMAIL=datadrivenpath@gmail.com
WD=$(pwd)
NEW=nhershey.com
NEW_DOMAIN=nhershey.com
CERT_DIR=nhersheycom
ROOT=$WD/$NEW
sudo chown -R -h nate:nate $ROOT

sudo cat <<EOT > $ROOT/conf.d/default.conf
server {
     listen 443 ssl http2;
     server_name $NEW_DOMAIN;
     root /public_html;

     server_tokens off;
     ssl_certificate /etc/nginx/ssl/$CERT_DIR/live/$NEW_DOMAIN/fullchain.pem;
     ssl_certificate_key /etc/nginx/ssl/$CERT_DIR/live/$NEW_DOMAIN/privkey.pem;
     ssl_dhparam /etc/nginx/dhparam/$CERT_DIR/dhparam-2048.pem;

     ssl_buffer_size 8k;
     ssl_protocols TLSv1.2;
     ssl_prefer_server_ciphers on;
     ssl_ciphers ECDH+AESGCM:ECDH+AES256:ECDH+AES128:DH+3DES:!ADH:!AECDH:!MD5;

    location / {
        index index.html;
    }

}
EOT

echo "STEP (7/10) Made new default.conf with TLSv1.2 for new domain: ${NEW}..."

sudo cat <<EOT > $ROOT/Dockerfile 
#CERTS FOR $NEW
COPY ./certs/$NEW_DOMAIN/dhparam /etc/nginx/dhparam/$CERT_DIR
COPY ./certs/$NEW_DOMAIN/certbot/conf/ /etc/nginx/ssl/$CERT_DIR/
COPY ./certs/$NEW_DOMAIN/certbot/data /usr/share/nginx/html/letsencrypt/$CERT_DIR/
EOT

echo "Now, copy nginx and dockerfile contents in ${NEW}"
echo "Then, if is new domain, turn on cloudflare proxy and full strict mode and make sure to rebuild nginx from scratch"

