// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package behaviorpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BehaviorServiceClient is the client API for BehaviorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BehaviorServiceClient interface {
	LogCmd(ctx context.Context, in *LogCmdRequest, opts ...grpc.CallOption) (*LogCmdResponse, error)
}

type behaviorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBehaviorServiceClient(cc grpc.ClientConnInterface) BehaviorServiceClient {
	return &behaviorServiceClient{cc}
}

func (c *behaviorServiceClient) LogCmd(ctx context.Context, in *LogCmdRequest, opts ...grpc.CallOption) (*LogCmdResponse, error) {
	out := new(LogCmdResponse)
	err := c.cc.Invoke(ctx, "/behavior.BehaviorService/LogCmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BehaviorServiceServer is the server API for BehaviorService service.
// All implementations should embed UnimplementedBehaviorServiceServer
// for forward compatibility
type BehaviorServiceServer interface {
	LogCmd(context.Context, *LogCmdRequest) (*LogCmdResponse, error)
}

// UnimplementedBehaviorServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBehaviorServiceServer struct {
}

func (UnimplementedBehaviorServiceServer) LogCmd(context.Context, *LogCmdRequest) (*LogCmdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogCmd not implemented")
}

// UnsafeBehaviorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BehaviorServiceServer will
// result in compilation errors.
type UnsafeBehaviorServiceServer interface {
	mustEmbedUnimplementedBehaviorServiceServer()
}

func RegisterBehaviorServiceServer(s grpc.ServiceRegistrar, srv BehaviorServiceServer) {
	s.RegisterService(&BehaviorService_ServiceDesc, srv)
}

func _BehaviorService_LogCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogCmdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BehaviorServiceServer).LogCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/behavior.BehaviorService/LogCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BehaviorServiceServer).LogCmd(ctx, req.(*LogCmdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BehaviorService_ServiceDesc is the grpc.ServiceDesc for BehaviorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BehaviorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "behavior.BehaviorService",
	HandlerType: (*BehaviorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LogCmd",
			Handler:    _BehaviorService_LogCmd_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "behaviorpb.proto",
}
